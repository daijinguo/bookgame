package android.dai.bookgame;import android.app.Activity;import android.graphics.Outline;import android.os.Bundle;import android.view.View;import android.view.ViewOutlineProvider;import android.view.animation.Animation;import android.view.animation.ScaleAnimation;import android.widget.LinearLayout;import android.widget.TextView;import java.util.ArrayDeque;public class MainActivity extends Activity {    // Used to load the 'native-lib' library on application startup.    static {        System.loadLibrary("native-lib");    }    /**     * A native method that is implemented by the 'native-lib' native library,     * which is packaged with this application.     */    public native String stringFromJNI();    private static ArrayDeque<TextView> msItemViews = new ArrayDeque<>();    private LinearLayout mContainer;    private MainItemViewsUtility mUtility;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        View mainer = findViewById(R.id.mainer);        // demo use setOutlineProvider address        // http://blog.csdn.net/u013210620/article/details/50075533        mainer.setClipToOutline(true);        mainer.setOutlineProvider(new ViewOutlineProvider() {            @Override            public void getOutline(View view, Outline outline) {                //outline.setOval(0, 0, view.getWidth(), view.getHeight());                int radius = Math.min(view.getWidth(), view.getHeight()) / 20;                outline.setRoundRect(0, 0, view.getWidth(), view.getHeight(), radius);            }        });        mContainer = (LinearLayout) findViewById(R.id.container);        mUtility = new MainItemViewsUtility(this);        addViewToContainer();    }    private void addViewToContainer() {        if (null == mUtility) return;        ArrayDeque<TextView> views = mUtility.getViews();        if (!views.isEmpty()) {            TextView view = views.remove();            addView(view);            Animation scaleAnimation = new ScaleAnimation(0.1f, 1.0f, 0.1f, 1.0f,                    Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.0f);            scaleAnimation.setDuration(400);            scaleAnimation.setAnimationListener(new Animation.AnimationListener() {                @Override                public void onAnimationStart(Animation animation) {                }                @Override                public void onAnimationEnd(Animation animation) {                    addViewToContainer();                }                @Override                public void onAnimationRepeat(Animation animation) {                }            });            view.startAnimation(scaleAnimation);        }    }    private void addView(View view) {        if (null != view && null != mContainer) {            final int N = mContainer.getChildCount();            for (int i = 0; i < N; ++i) {                if (view == mContainer.getChildAt(i)) {                    return;                }            }            mContainer.addView(view);        }    }}